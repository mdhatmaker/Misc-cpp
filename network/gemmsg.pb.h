// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gemmsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gemmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gemmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gemmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gemmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gemmsg_2eproto;
namespace trading {
class GemMsg;
class GemMsgDefaultTypeInternal;
extern GemMsgDefaultTypeInternal _GemMsg_default_instance_;
class GemMsgList;
class GemMsgListDefaultTypeInternal;
extern GemMsgListDefaultTypeInternal _GemMsgList_default_instance_;
}  // namespace trading
PROTOBUF_NAMESPACE_OPEN
template<> ::trading::GemMsg* Arena::CreateMaybeMessage<::trading::GemMsg>(Arena*);
template<> ::trading::GemMsgList* Arena::CreateMaybeMessage<::trading::GemMsgList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trading {

// ===================================================================

class GemMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trading.GemMsg) */ {
 public:
  GemMsg();
  virtual ~GemMsg();

  GemMsg(const GemMsg& from);
  GemMsg(GemMsg&& from) noexcept
    : GemMsg() {
    *this = ::std::move(from);
  }

  inline GemMsg& operator=(const GemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GemMsg& operator=(GemMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GemMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GemMsg* internal_default_instance() {
    return reinterpret_cast<const GemMsg*>(
               &_GemMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GemMsg& a, GemMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GemMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GemMsg* New() const final {
    return CreateMaybeMessage<GemMsg>(nullptr);
  }

  GemMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GemMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GemMsg& from);
  void MergeFrom(const GemMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GemMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trading.GemMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gemmsg_2eproto);
    return ::descriptor_table_gemmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestamp1FieldNumber = 1,
    kTimestamp2FieldNumber = 2,
    kLastUpdatedFieldNumber = 4,
    kIdFieldNumber = 3,
  };
  // string timestamp1 = 1;
  void clear_timestamp1();
  const std::string& timestamp1() const;
  void set_timestamp1(const std::string& value);
  void set_timestamp1(std::string&& value);
  void set_timestamp1(const char* value);
  void set_timestamp1(const char* value, size_t size);
  std::string* mutable_timestamp1();
  std::string* release_timestamp1();
  void set_allocated_timestamp1(std::string* timestamp1);
  private:
  const std::string& _internal_timestamp1() const;
  void _internal_set_timestamp1(const std::string& value);
  std::string* _internal_mutable_timestamp1();
  public:

  // string timestamp2 = 2;
  void clear_timestamp2();
  const std::string& timestamp2() const;
  void set_timestamp2(const std::string& value);
  void set_timestamp2(std::string&& value);
  void set_timestamp2(const char* value);
  void set_timestamp2(const char* value, size_t size);
  std::string* mutable_timestamp2();
  std::string* release_timestamp2();
  void set_allocated_timestamp2(std::string* timestamp2);
  private:
  const std::string& _internal_timestamp2() const;
  void _internal_set_timestamp2(const std::string& value);
  std::string* _internal_mutable_timestamp2();
  public:

  // .google.protobuf.Timestamp last_updated = 4;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trading.GemMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp2_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gemmsg_2eproto;
};
// -------------------------------------------------------------------

class GemMsgList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trading.GemMsgList) */ {
 public:
  GemMsgList();
  virtual ~GemMsgList();

  GemMsgList(const GemMsgList& from);
  GemMsgList(GemMsgList&& from) noexcept
    : GemMsgList() {
    *this = ::std::move(from);
  }

  inline GemMsgList& operator=(const GemMsgList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GemMsgList& operator=(GemMsgList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GemMsgList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GemMsgList* internal_default_instance() {
    return reinterpret_cast<const GemMsgList*>(
               &_GemMsgList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GemMsgList& a, GemMsgList& b) {
    a.Swap(&b);
  }
  inline void Swap(GemMsgList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GemMsgList* New() const final {
    return CreateMaybeMessage<GemMsgList>(nullptr);
  }

  GemMsgList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GemMsgList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GemMsgList& from);
  void MergeFrom(const GemMsgList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GemMsgList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trading.GemMsgList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gemmsg_2eproto);
    return ::descriptor_table_gemmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .trading.GemMsg messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::trading::GemMsg* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trading::GemMsg >*
      mutable_messages();
  private:
  const ::trading::GemMsg& _internal_messages(int index) const;
  ::trading::GemMsg* _internal_add_messages();
  public:
  const ::trading::GemMsg& messages(int index) const;
  ::trading::GemMsg* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trading::GemMsg >&
      messages() const;

  // @@protoc_insertion_point(class_scope:trading.GemMsgList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trading::GemMsg > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gemmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GemMsg

// string timestamp1 = 1;
inline void GemMsg::clear_timestamp1() {
  timestamp1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GemMsg::timestamp1() const {
  // @@protoc_insertion_point(field_get:trading.GemMsg.timestamp1)
  return _internal_timestamp1();
}
inline void GemMsg::set_timestamp1(const std::string& value) {
  _internal_set_timestamp1(value);
  // @@protoc_insertion_point(field_set:trading.GemMsg.timestamp1)
}
inline std::string* GemMsg::mutable_timestamp1() {
  // @@protoc_insertion_point(field_mutable:trading.GemMsg.timestamp1)
  return _internal_mutable_timestamp1();
}
inline const std::string& GemMsg::_internal_timestamp1() const {
  return timestamp1_.GetNoArena();
}
inline void GemMsg::_internal_set_timestamp1(const std::string& value) {
  
  timestamp1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GemMsg::set_timestamp1(std::string&& value) {
  
  timestamp1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trading.GemMsg.timestamp1)
}
inline void GemMsg::set_timestamp1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trading.GemMsg.timestamp1)
}
inline void GemMsg::set_timestamp1(const char* value, size_t size) {
  
  timestamp1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trading.GemMsg.timestamp1)
}
inline std::string* GemMsg::_internal_mutable_timestamp1() {
  
  return timestamp1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GemMsg::release_timestamp1() {
  // @@protoc_insertion_point(field_release:trading.GemMsg.timestamp1)
  
  return timestamp1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GemMsg::set_allocated_timestamp1(std::string* timestamp1) {
  if (timestamp1 != nullptr) {
    
  } else {
    
  }
  timestamp1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp1);
  // @@protoc_insertion_point(field_set_allocated:trading.GemMsg.timestamp1)
}

// string timestamp2 = 2;
inline void GemMsg::clear_timestamp2() {
  timestamp2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GemMsg::timestamp2() const {
  // @@protoc_insertion_point(field_get:trading.GemMsg.timestamp2)
  return _internal_timestamp2();
}
inline void GemMsg::set_timestamp2(const std::string& value) {
  _internal_set_timestamp2(value);
  // @@protoc_insertion_point(field_set:trading.GemMsg.timestamp2)
}
inline std::string* GemMsg::mutable_timestamp2() {
  // @@protoc_insertion_point(field_mutable:trading.GemMsg.timestamp2)
  return _internal_mutable_timestamp2();
}
inline const std::string& GemMsg::_internal_timestamp2() const {
  return timestamp2_.GetNoArena();
}
inline void GemMsg::_internal_set_timestamp2(const std::string& value) {
  
  timestamp2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GemMsg::set_timestamp2(std::string&& value) {
  
  timestamp2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trading.GemMsg.timestamp2)
}
inline void GemMsg::set_timestamp2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trading.GemMsg.timestamp2)
}
inline void GemMsg::set_timestamp2(const char* value, size_t size) {
  
  timestamp2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trading.GemMsg.timestamp2)
}
inline std::string* GemMsg::_internal_mutable_timestamp2() {
  
  return timestamp2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GemMsg::release_timestamp2() {
  // @@protoc_insertion_point(field_release:trading.GemMsg.timestamp2)
  
  return timestamp2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GemMsg::set_allocated_timestamp2(std::string* timestamp2) {
  if (timestamp2 != nullptr) {
    
  } else {
    
  }
  timestamp2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp2);
  // @@protoc_insertion_point(field_set_allocated:trading.GemMsg.timestamp2)
}

// int32 id = 3;
inline void GemMsg::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GemMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GemMsg::id() const {
  // @@protoc_insertion_point(field_get:trading.GemMsg.id)
  return _internal_id();
}
inline void GemMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GemMsg::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:trading.GemMsg.id)
}

// .google.protobuf.Timestamp last_updated = 4;
inline bool GemMsg::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool GemMsg::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GemMsg::_internal_last_updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GemMsg::last_updated() const {
  // @@protoc_insertion_point(field_get:trading.GemMsg.last_updated)
  return _internal_last_updated();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GemMsg::release_last_updated() {
  // @@protoc_insertion_point(field_release:trading.GemMsg.last_updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GemMsg::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    last_updated_ = p;
  }
  return last_updated_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GemMsg::mutable_last_updated() {
  // @@protoc_insertion_point(field_mutable:trading.GemMsg.last_updated)
  return _internal_mutable_last_updated();
}
inline void GemMsg::set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:trading.GemMsg.last_updated)
}

// -------------------------------------------------------------------

// GemMsgList

// repeated .trading.GemMsg messages = 1;
inline int GemMsgList::_internal_messages_size() const {
  return messages_.size();
}
inline int GemMsgList::messages_size() const {
  return _internal_messages_size();
}
inline void GemMsgList::clear_messages() {
  messages_.Clear();
}
inline ::trading::GemMsg* GemMsgList::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:trading.GemMsgList.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trading::GemMsg >*
GemMsgList::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:trading.GemMsgList.messages)
  return &messages_;
}
inline const ::trading::GemMsg& GemMsgList::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::trading::GemMsg& GemMsgList::messages(int index) const {
  // @@protoc_insertion_point(field_get:trading.GemMsgList.messages)
  return _internal_messages(index);
}
inline ::trading::GemMsg* GemMsgList::_internal_add_messages() {
  return messages_.Add();
}
inline ::trading::GemMsg* GemMsgList::add_messages() {
  // @@protoc_insertion_point(field_add:trading.GemMsgList.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trading::GemMsg >&
GemMsgList::messages() const {
  // @@protoc_insertion_point(field_list:trading.GemMsgList.messages)
  return messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trading

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gemmsg_2eproto
